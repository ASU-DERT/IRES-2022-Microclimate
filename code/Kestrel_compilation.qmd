---
title: "IRES 2022 Kestrel data"
author: "Heather Throop"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Overview

This file works up Kestrel data from the 2022 IRES Microclimate project, microphase 1 and 2. Original Kestrel csv files (L0 data) are pulled in, annotated, cleaned, and saved as a L1 file. This file can be pulled in for future analyses (start at L1 section).

Data are graphed by logger.

File written: 9 July 2025, Heather Throop\
Last update: 11 July 2025, Heather Throop

## Preparation Steps

```{r}
#| echo: false
#| label: load packages 

library(here) # v. 0.1
library(stringr) # v. 1.2.0
library(purrr) # v. 0.2.3
library(tidyverse)
library(lubridate)
```

## L0 to L1 iButton Compilation

### This can be skipped - use compiled L1 data (see next header)

```{r}
#| label: pull in L0 Kestrel data

### NOTE - THIS SECTION CAN BE SKIPPED AND THE L1 file can be used

#--read and work up data for microphase 2-----------

# list all files to read in
( allfiles = list.files(path = here("data", "KestrelData.L0"), # get a list of all files in folder
                        pattern = ".csv", # only files that end in .csv
                        full.names = TRUE,  # return the complete file path (and not just the file name)
                        recursive = TRUE) ) # include the child folders in the directory

# read in one file and extract identifying information from the file name
( test = read.csv(allfiles[1], #read in the first file listed in "allfiles"
                  skip = 5, # skip the first 15 lines (they are extraneous header info)
                  header = FALSE, # there are no column headers
                  col.names = c("datetime", "temperature", "RH", "HeatIndex",
                                "DewPoint","DataType") ) ) #add column headers

( allnames = str_split( allfiles[1], pattern = "/", simplify = TRUE) ) #create a matrix of strings for file info

test$KestrelID <- str_extract(allnames[, ncol(allnames)], pattern = "_\\d{7}_") |>
  str_replace_all("_", "")

# function to do the above reading and extracting identifying information (so this can be done on all the files)
read_fun <- function(path) {
  test <- read.csv(path, 
                   skip = 5,
                   header = FALSE,
                   col.names = c("datetime", "temperature", "RH", "HeatIndex", 
                                 "DewPoint", "DataType"),
                   stringsAsFactors = FALSE)

  # Convert all data columns (except datetime and DataType) to numeric
  test <- test |>
    mutate(across(c(temperature, RH, HeatIndex, DewPoint), ~ as.numeric(.)))

  # Extract Kestrel ID from filename
  allnames <- str_split(path, pattern = "/", simplify = TRUE)
  test$KestrelID <- str_extract(allnames[, ncol(allnames)], pattern = "_\\d{7}_") |>
    str_replace_all("_", "")

  return(test)
}

read_fun(allfiles[14]) # use to test the function on an individual file (this can be tested on any of them)

Kestrels_df = map_dfr(allfiles, read_fun) # combine all the files
Kestrels_df$loggertype <- "Kestrel" #add a column for the kind of logger used

Kestrels_df <- Kestrels_df |>
  mutate(
    datetime = str_squish(datetime),  # remove double spaces
    datetime1 = parse_date_time(
      datetime,
      orders = c("Ymd IMS p", "mdy HM"),
      tz = "Africa/Johannesburg"
    )
  ) |>
    mutate(datetime = datetime1) |> # get rid of the extra column now that it is parsed correctly
    select(-datetime1) |>
  distinct()
```

```{r}
#| label: clean data & save L2 files for microphase 1 and 2

# Define the experiment start times in Johannesburg time zone
start_time_m1 <- as.POSIXct("2022-07-24 11:00:00", tz = "Africa/Johannesburg")
start_time_m2 <- as.POSIXct("2022-07-30 12:00:00", tz = "Africa/Johannesburg")

## Make a new dataframe for microphase1
# Select rows based on time of experiment and compute elapsed time in hours
Microphase1_Kestrels_df <- Kestrels_df |>
  filter(datetime >= start_time_m1 & datetime <= start_time_m1 + lubridate::hours(48)) |>
  mutate(elapsed_time = as.numeric(difftime(datetime, start_time_m1, units = "hours")))
# write the dataframe as a L1 file ready for future analysis and plotting
write_csv(Microphase1_Kestrels_df, here("data", "microphase1_Kestrels_L1.csv"))
  
## Make a new dataframe for microphase2
# Select rows based on time of experiment and compute elapsed time in hours
Microphase2_Kestrels_df <- Kestrels_df |>
  filter(datetime >= start_time_m2 & datetime <= start_time_m2 + lubridate::hours(48)) |>
  mutate(elapsed_time = as.numeric(difftime(datetime, start_time_m2, units = "hours")))
# write the dataframe as a L1 file ready for future analysis and plotting
write_csv(Microphase2_Kestrels_df, here("data", "microphase2_Kestrels_L1.csv"))
```

## L1 Kestrel Work-Up

Note that I can't find locations for Kestrels, so these data may not be useful.

```{r}
#|label: Plot microphase1 temperature

# Temperature plot
micro1_Kestrel_T <- ggplot(Microphase1_Kestrels_df, 
                    aes(x = datetime, y = temperature, color = KestrelID)) +
  geom_point() +
  labs(title = "Microphase1 Kestrels",
       x = "DateTime",
       y = "Temperature (°C)",
       color = "Logger ID") +
  scale_x_datetime(date_breaks = "4 hours", date_labels = "%m-%d\n%H:%M") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
micro1_Kestrel_T

# save the plot
ggsave(filename = 
       here("output", "figures", "micro1_Kestrel_T.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

```{r}
#|label: Plot microphase1 RH

# Temperature plot
micro1_Kestrel_RH <- ggplot(Microphase1_Kestrels_df, 
                    aes(x = datetime, y = RH, color = KestrelID)) +
  geom_point() +
  labs(title = "Microphase1 Kestrels",
       x = "DateTime",
       y = "Relative Humidity (%)",
       color = "Logger ID") +
  scale_x_datetime(date_breaks = "4 hours", date_labels = "%m-%d\n%H:%M") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
micro1_Kestrel_RH

# save the plot
ggsave(filename = 
       here("output", "figures","micro1_Kestrel_RH.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

```{r}
#|label: Plot microphase2 temperature

# Temperature plot
micro2_Kestrel_T <- ggplot(Microphase2_Kestrels_df, 
                    aes(x = datetime, y = temperature, color = KestrelID)) +
  geom_point() +
  labs(title = "Microphase2 Kestrels",
       x = "DateTime",
       y = "Temperature (°C)",
       color = "Logger ID") +
  scale_x_datetime(date_breaks = "4 hours", date_labels = "%m-%d\n%H:%M") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
micro2_Kestrel_T

# save the plot
ggsave(filename = 
       here("output", "figures", "micro2_Kestrel_T.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

```{r}
#|label: Plot microphase2 RH

# Temperature plot
micro1_Kestrel_RH <- ggplot(Microphase2_Kestrels_df, 
                    aes(x = datetime, y = RH, color = KestrelID)) +
  geom_point() +
  labs(title = "Microphase2 Kestrels",
       x = "DateTime",
       y = "Relative Humidity (%)",
       color = "Logger ID") +
  scale_x_datetime(date_breaks = "4 hours", date_labels = "%m-%d\n%H:%M") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
micro1_Kestrel_RH

# save the plot
ggsave(filename = 
       here("output", "figures", "micro2_Kestrel_RH.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```
