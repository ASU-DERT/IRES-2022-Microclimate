---
title: "microphase1and2_litter"
author: "Heather Throop"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Overview

This code works up litter moisture data from the 2022 IRES Microclimate project, both microphase 1 and 2. Original csv file is pulled in, cleaned, analyzed, and graphed.

File written: 13 July 2025, Heather Throop\
Last updated: 21 August 2025, Heather Throop - needs more work on iButtons binning (I stopped on M2, haven't done M1)

THE ANOVA ASSUMPTIONS FUNCTION IS NOT WORKING

## Preparation Steps

```{r}
#| echo: false
#| label: load packages 

library(here) 
library(tidyverse)
library(grid)
library(bestNormalize)
library(car)        # for Levene's test
library(ggplot2)
library(emmeans)    # for post hoc Tukey
library(cowplot)
library(ggpattern)
library(png)

# define colors
TYPE_colors <- c("#fa882a","#6e4424","#5dba2b","#166610")
DEPTH_colors <- c("#166610", "tan", "#6e4424")
Rainfall_colors <- c("#d95f02", "#1b9e77", "#7570b3")

# Read in the moon and sun images as grobs
moon_img <- rasterGrob(readPNG("moon.png"), interpolate = TRUE)
sun_img <- rasterGrob(readPNG("sun.png"), interpolate = TRUE)

sessionInfo()
```

```{r}
#| label: Three-way ANOVA function

run_threeway_anova <- function(df, response_var, factors, 
                               df_name = deparse(substitute(df)), 
                               output_file = NULL) {
  if (length(factors) != 3) {
    stop("You must provide exactly three main effect variable names.")
  }

  # Clean factor names
  factors <- trimws(factors)

  # Ensure all specified variables are factors
  df <- df |>
    mutate(across(all_of(factors), as.factor))

  # Build terms for the model
  all_terms <- c(
    factors,
    paste(factors[1], factors[2], sep = ":"),
    paste(factors[1], factors[3], sep = ":"),
    paste(factors[2], factors[3], sep = ":"),
    paste(factors[1], factors[2], factors[3], sep = ":")
  )

  # Create formula
  formula <- reformulate(termlabels = all_terms, response = response_var)

  # Fit models
  aov_model <- aov(formula, data = df)
  lm_model <- lm(formula, data = df)
  aov_summary <- summary(aov_model)

  # Capture ANOVA output as character
  summary_txt <- capture.output(print(aov_summary))

  # Store post hoc results
  posthoc_results <- list()
  posthoc_txt <- c()

  for (factor in factors) {
    if (nlevels(df[[factor]]) > 1) {
      try({
        emm <- emmeans::emmeans(lm_model, specs = factor)
        pairs_result <- if (nlevels(df[[factor]]) > 2) {
          emmeans::pairs(emm, adjust = "tukey")
        } else {
          "Only 2 levels; no pairwise comparisons needed."
        }

        posthoc_results[[factor]] <- list(
          emm = emm,
          pairs = pairs_result
        )

        # Capture output
        posthoc_txt <- c(
          posthoc_txt,
          paste0("â†’ ", factor),
          capture.output(print(emm)),
          if (is.character(pairs_result)) pairs_result else capture.output(print(pairs_result)),
          ""
        )
      })
    }
  }

  # Combine text results
  all_txt <- c(
    paste0("\n=== ANOVA Results for Dataframe: ", df_name, " ==="),
    paste0("Response variable: ", response_var),
    paste0("Model formula: ", deparse(formula)),
    "\n--- ANOVA Summary ---",
    summary_txt,
    "\n--- Post Hoc Tests ---",
    posthoc_txt
  )

  # Return results
  return(list(
    aov_model = aov_model,
    lm_model = lm_model,
    anova_summary = aov_summary,
    posthoc = posthoc_results
  ))
}


```

# Microphase 1

## Data Ingestion & Calculations

```{r}
#| label: read in data and calculate derived variables
micro1_df <- read_csv(here("data","microphase1_litter_data.csv"))
micro1_df <- na.omit(micro1_df) # remove lines with NAs

## data preparations
# change rainfall to categorical (these are treatment names)
micro1_df$Rainfall <- as.factor(micro1_df$Rainfall) 
# use 'as_datetime' from lubridate to change Datetime to POSIXct format
micro1_df$Datetime <- as_datetime(micro1_df$Datetime, format = "%m/%d/%y %H:%M", tz = "Africa/Johannesburg")

# Define the experiment start time in Johannesburg time zone
start_time <- as.POSIXct("2022-07-24 11:00:00", tz = "Africa/Johannesburg")

# Compute elapsed time in hours
micro1_df <- micro1_df |>
  mutate(elapsed_time = as.numeric(difftime(Datetime, start_time, units = "hours")))

# define night (6 pm to 6 am) periods during the experiment (relative to elapsed time)
night1_start_m1 <- 7
night1_end_m1 <- 19
night2_start_m1 <- 31
night2_end_m1 <- 43

# recode species names to functional types, calling recode explictly as it seems to be masked
micro1_df$Species <- dplyr::recode(micro1_df$Species,
                                   "SAPE" = "shrub",
                                   "STSA" = "grass")
# recode TYPE to condition and functional types, calling recode explictly as it seems to be masked
micro1_df$TYPE <- dplyr::recode(micro1_df$TYPE,
                                   "BSP" = "brown shrub",
                                   "BSS" = "brown grass",
                                   "GSP" = "green shrub",
                                   "GSS" = "green grass")

##calculate derived variables
# calculate litter wet mass, dry mass, and percent moisture at collection
micro1_df <- micro1_df |> 
  mutate(LitterWetMass = Sample_mass - SandMasswBag, # sample wet mass at collection
         LitterDryMass = Drymasswbag - D_bagMasswSand, # sample dry mass at collection
         LitterMoisturePct = ((LitterWetMass - LitterDryMass) / LitterDryMass) *100)   

# explore LitterMoisturePct data with a histogram
hist(micro1_df$LitterMoisturePct,
     main = "Histogram of Litter Moisture (%)",
     xlab = "WHC (% by mass)",
     col = "skyblue",
     border = "white",
     breaks = 20)

# There are two outlier where LitterMoisturePct is over 100 while other values in the same group are ~5 (for elapsed_time = 12) and 85 (for elapsed_time = 48). Remove these.
micro1_df <- micro1_df |>
  filter(!(Species == "grass" &
           Littercond == "Green" &
           elapsed_time == 12 &
           LitterMoisturePct > 100),
         !(Species == "shrub" &
           Littercond == "Brown" &
           elapsed_time == 48 &
           LitterMoisturePct > 100))
```

## Litter Data Plotting

```{r}
#| label: calculate means

# calculate mean values for line graphs 
micro1_means <- micro1_df |> 
  group_by(Species, Littercond, Rainfall, TYPE, elapsed_time) |> 
  summarise(LitterMoisture_mean=mean(LitterMoisturePct, na.rm=TRUE), 
            n=n(), 
            sd=sd(LitterMoisturePct, na.rm=TRUE), 
            se=sd/sqrt(n))
```

```{r}
#| label: litter moisture plot by species and condition - NOT USED

micro1_litter_p <- micro1_means |>
  ggplot(aes(x = elapsed_time, y = LitterMoisture_mean, 
                       color = as.factor(Rainfall),
                       shape = as.factor(Rainfall),
                       linetype = as.factor(Rainfall),
                       group = Rainfall)) +
  annotate("rect", xmin = 35, xmax = 45, ymin = -5, ymax = Inf, 
           alpha = 0.1, fill = "skyblue2") +
  geom_line() +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = LitterMoisture_mean - se, 
                    ymax = LitterMoisture_mean + se), width = 0.5) +
  facet_grid(rows = vars(Littercond), cols = vars(Species)) +
  # Custom colors, shapes, and line types for Rainfall
  scale_color_manual(values = c("0" = "red", "5" = "green", "10" = "blue")) +
  scale_shape_manual(values = c("0" = 16,  # filled circle
                                "5" = 15,  # filled square
                                "10" = 17  # filled triangle
                                )) +
  scale_linetype_manual(values = c("0" = "solid",
                                   "5" = "dotted",
                                   "10" = "dashed")) +
  labs(x = "Elapsed Time",
       y = "Litter Moisture (% by mass)",
       color = "",
       shape = "",
       linetype = "") +
  theme_classic(base_size = 16) +
 theme(
  panel.spacing = unit(1, "lines"),
  strip.background = element_rect(fill = "gray80", color = "black"),
  strip.text = element_text(color = "black"),
  panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8)) +
  scale_y_continuous(limits = c(-5, NA)) +
  theme(
  legend.position = c(0.05, 0.2),  # x and y between 0 (left/bottom) and 1 (right/top)
  legend.justification = c("left", "bottom"),
  legend.background = element_rect(fill = alpha('white', 0.6), color = NA))
micro1_litter_p


# save the plot
ggsave(filename = 
       here("output","figures", "microphase1_littermoisture.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

```{r}
#| label: litter moisture by rainfall 

micro1_litter_p2 <- micro1_means |>
    mutate(
    Rainfall = fct_recode(Rainfall,
      "A. No Addition"      = "0",
      "B. 5 mm Addition"   = "5",
      "C. 10 mm Addition"   = "10"
    )
  ) |>
  ggplot(aes(x = elapsed_time, y = LitterMoisture_mean,
             color = TYPE,
             shape = TYPE,
             linetype = TYPE,
             group = TYPE)) +
  # add blue box for fog
  annotate("rect", xmin = 33, xmax = 44, 
           ymin = -5, ymax = Inf, alpha = 0.5, fill = "#54b8e3") +
  # add fog label
  # annotate("text", x = 38.5, y = 130, label = "Fog", color = "#54b8e3", size = 5) +
  # Add shaded night areas
  annotate("rect",
         xmin = night1_start_m1, xmax = night1_end_m1, 
         ymin = -5, ymax = Inf,
         alpha = 0.4, fill = "darkgrey",
         colour = "black", linewidth = 0.3) +
  annotate("rect", 
         xmin = night2_start_m1, xmax = night2_end_m1, 
         ymin = -5, ymax = Inf, 
         alpha = 0.4, fill = "darkgrey",
         colour = "black", linewidth = 0.3) +
  geom_line() +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = LitterMoisture_mean - se, 
                    ymax = LitterMoisture_mean + se), 
                width = 0.5,
                linetype = "solid") +
  facet_grid(. ~ Rainfall) +
  scale_color_manual(values = TYPE_colors) +
  scale_shape_manual(values = c(16, 17, 16, 17)) +
  labs(x = NULL,
       y = "Litter Moisture (%)",
       color = NULL) +   # remove the title above legend
  guides(
    color = guide_legend(override.aes = list(shape = c(16, 17, 16, 17), linetype = c("solid", "dashed", "solid", "dashed"))),
    shape = "none",      # <-- hide shape legend
    linetype = "none"    # <-- hide linetype legend
  ) +
  theme_classic(base_size = 16) +
  theme(
    panel.spacing = unit(1, "lines"),
    strip.background = element_rect(fill = "gray80", color = "black"),
    strip.text = element_text(color = "black"),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),
    legend.position = "top",
    legend.key.width = unit(1.5, "cm"),
    legend.justification = c("left", "top"),
    legend.background = element_blank(),
    legend.key.size = unit(0.8, "lines"),
    legend.spacing.x = unit(0.3, "cm"),
    legend.text = element_text(size = 12)
  ) +
  scale_y_continuous(limits = c(-5, 155), expand = c(0, 0)) +
  scale_x_continuous(limits = c(0, 48)) +
   # Add moon images in night areas
  annotation_custom(moon_img, xmin = 8, xmax = 18, ymin = 137, ymax = 147) +
  annotation_custom(moon_img, xmin = 32, xmax = 42, ymin = 137, ymax = 147) +
  # Add sun images in day areas
  annotation_custom(sun_img, xmin = 19, xmax = 31, ymin = 136, ymax = 148) 

micro1_litter_p2

# save the plot
ggsave(filename = 
       here("output","figures", "microphase1_littermoisture_by_ppt.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

## iButton Data Plotting

```{r}
#| label: read in L1 iButton CSV
Microphase1_iButtons_df <- read_csv(here("data","microphase1_iButtons_L1.csv"))

# change to a factor and change capitalization for consistency
Microphase1_iButtons_df$Rainfall <- as.factor(Microphase1_iButtons_df$rainfall)

# add new column for TYPE that combines species and condition (to be comparable with litter data)
Microphase1_iButtons_df <- Microphase1_iButtons_df |>
  mutate(TYPE = case_when(
    species == "SP" & condition == "B" ~ "brown shrub",
    species == "SS" & condition == "B" ~ "brown grass",
    species == "SP" & condition == "G" ~ "green shrub",
    species == "SS" & condition == "G" ~ "green grass",
    TRUE ~ NA_character_
  ))
```

```{r}
#| label: iButton temperature by rainfall 

### NOTE: this should print a ribbon w SE but it does not, apparently since not multiple logs per time (time of logs not perfectly aligned). Data can be binned first to have multiple points to get an SE.

micro1_temp_p1 <- Microphase1_iButtons_df |>
    mutate(
    Rainfall = fct_recode(Rainfall,
      "D. No Addition"      = "0",
      "E. 5 mm Addition"   = "5",
      "F. 10 mm Addition"   = "10"
    )
  ) |>
  ggplot(aes(x = elapsed_time, y = temperature,
             color = TYPE,
             shape = TYPE,
             linetype = TYPE,
             group = TYPE)) +
  # add blue box for fog
  annotate("rect", xmin = 33, xmax = 44, 
           ymin = -Inf, ymax = Inf, alpha = 0.5, fill = "#54b8e3") +
  # add fog label
  # annotate("text", x = 38.5, y = 130, label = "Fog", color = "#54b8e3", size = 5) +
  # Add shaded night areas
  annotate("rect",
         xmin = night1_start_m1, xmax = night1_end_m1, 
         ymin = -Inf, ymax = Inf,
         alpha = 0.4, fill = "darkgrey",
         colour = "black", linewidth = 0.3) +
  annotate("rect", 
         xmin = night2_start_m1, xmax = night2_end_m1, 
         ymin = -Inf, ymax = Inf, 
         alpha = 0.4, fill = "darkgrey",
         colour = "black", linewidth = 0.3) +
  geom_smooth(method = "loess", se = TRUE, span = 0.2, linewidth = 0.5) +
  facet_grid(. ~ Rainfall) +
  scale_color_manual(values = TYPE_colors) +
  scale_linetype_manual(values = c("brown shrub" = "solid",
                                   "brown grass" = "dashed",
                                   "green shrub" = "solid",
                                   "green grass" = "dashed")) +
  scale_x_continuous(limits = c(0, 48)) +
  scale_y_continuous(limits = c(5, 45), expand = c(0, 0)) +
  labs(x = "Elapsed Time (hours)",
       y = "Litter Temp. (Â°C)",
       color = "",
       shape = "",
       linetype = "") +
  theme_classic(base_size = 16) +
  theme(
    panel.spacing = unit(1, "lines"),
    legend.position = "top",
    strip.background = element_rect(fill = "gray80", color = "black"),
    strip.text = element_text(color = "black"),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8)
  )
micro1_temp_p1

# save the plot
ggsave(filename = 
       here("output","figures", "microphase1_temperature_by_ppt.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

## Combine litter moisture and temperature plots

```{r}
#| label: Combine plots (FIG3)

# Extract the legend grob from the first plot

# supress legends in plot 2, use plot 1 legend in combined plot
plot1_legend <- micro1_litter_p2 + theme(legend.position = "top")
plot2_no_legend <- micro1_temp_p1 + theme(legend.position = "none")

combined_plots <- plot_grid(plot1_legend, plot2_no_legend, ncol = 1, align = "v", rel_heights = c(1, 1))

final_plot <- ggdraw() +
  draw_plot(combined_plots, x = 0, y = 0, width = 1, height = 1)
final_plot

# save the plot
ggsave(filename = 
       here("output","figures", "Fig3.microphase1_litter_and_temp.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)

```

## Litter Moisture ANOVAs

```{r}
#| label: check ANOVA assumptions

# Filter and prepare data
micro1_df <- micro1_df |>
  mutate(Group = interaction(Species, Littercond, Rainfall))

# Step 1: Check initial normality
hist(micro1_df$LitterMoisturePct, main = "Histogram Litter Moisture", xlab = "response var")
qqnorm(micro1_df$LitterMoisturePct); qqline(micro1_df$LitterMoisturePct)

shapiro_raw <- shapiro.test(micro1_df$LitterMoisturePct)
cat("Shapiro-Wilk p-value (raw):", shapiro_raw$p.value, "\n")

# Step 2: Apply bestNormalize if needed
if (shapiro_raw$p.value < 0.05) {
  bn_obj <- bestNormalize(micro1_df$LitterMoisturePct, allow_orderNorm = FALSE)
  micro1_df <- micro1_df |>
    mutate(LitterMoisturePct_trans = predict(bn_obj, newdata = LitterMoisturePct))
  used_var <- "LitterMoisturePct_trans"
  transform_used <- class(bn_obj$chosen_transform)[1]
  
  # Check transformed normality
  hist(micro1_df$LitterMoisturePct_trans, 
       main = "Histogram of Transformed Moisture", xlab = "response var_trans")
  qqnorm(micro1_df$LitterMoisturePct_trans); qqline(micro1_df$LitterMoisturePct_trans)
  
  shapiro_trans <- shapiro.test(micro1_df$LitterMoisturePct_trans)
  cat("Shapiro-Wilk p-value (transformed):", shapiro_trans$p.value, "\n")
} else {
  used_var <- "LitterMoisturePct"
  transform_used <- "None"
}

# Step 3: Levene's Test
levene_result <- leveneTest(reformulate("Group", used_var), data = micro1_df)

# Step 4: Summary Table
summary_table <- tibble(
  variable = used_var,
  transformed = transform_used,
  shapiro_p_raw = shapiro_raw$p.value,
  shapiro_p_trans = if (exists("shapiro_trans")) shapiro_trans$p.value else NA,
  levene_p = levene_result$`Pr(>F)`[1]
)
print(summary_table)
```

```{r}
#| label: three-way ANOVAs at key time points

# uses the ANOVA function laoded in the preparations steps chunk

# Separate into dfs for the key time points (8, 20, 32, 44)
micro1_8h_df <- micro1_df |>
  filter(elapsed_time == "8")

micro1_20h_df <- micro1_df |>
  filter(elapsed_time == "20")

micro1_32h_df <- micro1_df |>
  filter(elapsed_time == "32")

micro1_44h_df <- micro1_df |>
  filter(elapsed_time == "44")

# Three-way ANOVA models using the function defined in the preparation steps
result_8h <- run_threeway_anova(
  df = micro1_8h_df,
  response_var = used_var,
  factors = c("Species", "Littercond", "Rainfall")
)
print(result_8h)
# Save output to a text file
sink(here::here("output", "stats", "anova_summary_micro1_8h.txt"))
cat("\n=== ANOVA Summary ===\n")
print(result_8h)
sink()

result_20h <- run_threeway_anova(
  df = micro1_20h_df,
  response_var = used_var,
  factors = c("Species", "Littercond", "Rainfall")
)
print(result_20h)
# Save output to a text file
sink(here::here("output", "stats", "anova_summary_micro1_20h.txt"))
cat("\n=== ANOVA Summary ===\n")
print(result_20h)
sink()

result_32h <- run_threeway_anova(
  df = micro1_32h_df,
  response_var = used_var,
  factors = c("Species", "Littercond", "Rainfall")
)
print(result_32h)
# Save output to a text file
sink(here::here("output", "stats", "anova_summary_micro1_32h.txt"))
cat("\n=== ANOVA Summary ===\n")
print(result_32h)
sink()

result_44h <- run_threeway_anova(
  df = micro1_44h_df,
  response_var = used_var,
  factors = c("Species", "Littercond", "Rainfall")
)
print(result_44h)
# Save output to a text file
sink(here::here("output", "stats", "anova_summary_micro1_44h.txt"))
cat("\n=== ANOVA Summary ===\n")
print(result_44h)
sink()
```

# Microphase 2

## Data Ingestion & Calculations

```{r}
#| label: read in data and calculate derived variables
micro2_df <- read_csv(here("data","microphase2_litter_data.csv"))
micro2_df <- na.omit(micro2_df) # remove lines with NAs

## data preparations
# change rainfall and DEPTH to categorical (these are treatment names)
micro2_df$Rainfall <- as.factor(micro2_df$Rainfall) 
micro2_df$DEPTH <- as.factor(micro2_df$DEPTH)
# change Wmass, Dmass, and Moist to numeric (these are chr)
micro2_df$LitterWetMass <- as.numeric(micro2_df$Wmass) 
micro2_df$LitterDryMass <- as.numeric(micro2_df$Dmass) 
micro2_df$LitterMoisturePct <- as.numeric(micro2_df$Moist) 
# use 'as_datetime' from lubridate to change Datetime to POSIXct format
micro2_df$Datetime <- as_datetime(micro2_df$Datetime, format = "%m/%d/%y %H:%M", tz = "Africa/Johannesburg")

# Define the experiment start time in Johannesburg time zone
start_time_m2 <- as.POSIXct("2022-07-30 12:00:00", tz = "Africa/Johannesburg")

# Compute elapsed time in hours
micro2_df <- micro2_df |>
  mutate(elapsed_time = as.numeric(difftime(Datetime, start_time_m2, units = "hours")))

# Define night start and end (6 pm to 6 am) based on elapsed time
night1_start_m2 <- 6
night1_end_m2 <- 18
night2_start_m2 <- 30
night2_end_m2 <- 42

# explore LitterMoisturePct data with a histogram
hist(micro2_df$LitterMoisturePct,
     main = "Histogram of Litter Moisture (%)",
     xlab = "Litter Moisture (% by mass)",
     col = "skyblue",
     border = "white",
     breaks = 20)

# There are five outliers where LitterMoisturePct is less than -10%. Remove these.
micro2_df <- micro2_df |>
  filter(!(LitterMoisturePct < -10))
# filter out outliers in 1 mm DEPTH, 0 mm Rainfall with LitterMoisturePct >110%
micro2_df <- micro2_df |>
  filter(!(DEPTH == "1" & Rainfall == "0" & LitterMoisturePct > 110))
# filter out outliers for rainfall 0 mm, elapsed time 42 h 
micro2_df <- micro2_df |>
  filter(!(Rainfall == "0" & elapsed_time == 42 & LitterMoisturePct > 35))

```

## Litter Data Plotting

```{r}
#| label: calculate means

# calculate mean values for line graphs 
micro2_means <- micro2_df |> 
  group_by(DEPTH, Rainfall, elapsed_time) |> 
  summarise(LitterMoisture_mean=mean(LitterMoisturePct, na.rm=TRUE), 
            n=n(), 
            sd=sd(LitterMoisturePct, na.rm=TRUE), 
            se=sd/sqrt(n))
```

```{r}
#| label: plot litter moisture by rainfall and depth

micro2_litter_p1 <- micro2_means |>
  mutate(
    DEPTH = fct_recode(DEPTH,
      "A. Surface"      = "0",
      "B. 1 cm Depth"   = "1",
      "C. 3 cm Depth"   = "3"
    ),
    Rainfall = fct_recode(Rainfall,
      "0 mm" = "0",
      "5 mm" = "5",
      "10 mm" = "10")
  ) |>
  ggplot(aes(x = elapsed_time, y = LitterMoisture_mean,
             color = Rainfall,
             shape = Rainfall,
             linetype = Rainfall,
             group = Rainfall)) +
 # add blue box for fog
  annotate("rect", xmin = 18, xmax = 19, 
           ymin = -Inf, ymax = Inf, alpha = 0.5, fill = "#54b8e3") +
   # add fog label
 # annotate("text", x = 19, y = 65, label = "Fog", color = "#54b8e3", size = 5) +
  # Add shaded night areas
  annotate("rect", xmin = night1_start_m2, xmax = night1_end_m2, 
           ymin = -Inf, ymax = Inf, 
           alpha = 0.2, fill = "grey",
           colour = "black", linewidth = 0.3) +
  annotate("rect", xmin = night2_start_m2, xmax = night2_end_m2, 
           ymin = -Inf, ymax = Inf, 
           alpha = 0.2, fill = "grey",
           colour = "black", linewidth = 0.3) +
  geom_line() +
  geom_point(size = 3) +
  geom_errorbar(
    aes(ymin = LitterMoisture_mean - se, 
        ymax = LitterMoisture_mean + se),
    width = 0.5,
    linetype = "solid",
    show.legend = FALSE) +
  facet_grid(. ~ DEPTH) +
  labs(x = NULL,
       y = "Litter Moisture (%)",
       color = NULL) +   # no legend title
scale_color_manual(values = Rainfall_colors) +
scale_shape_manual(values = c(16, 17, 18)) +
scale_linetype_manual(values = c("solid", "dashed", "dotted")) +
guides(
  color = guide_legend(
    override.aes = list(
      shape = c(16, 17, 18),
      linetype = c("solid", "dashed", "dotted")
    )
  ),
  shape = "none",
  linetype = "none"
)+
theme(legend.title = element_blank()) +

  theme_classic(base_size = 16) +
  theme(
    panel.spacing = unit(1, "lines"),
    strip.background = element_rect(fill = "gray80", color = "black"),
    strip.text = element_text(color = "black"),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),
    legend.position = "top",
  #  legend.background = element_rect(fill = alpha("white", 0.7), color = "black"),
    legend.key.width = unit(1.5, "cm"),
    legend.justification = c("center", "top"),
    legend.background = element_blank(),
    legend.key.size = unit(0.8, "lines"),
    legend.spacing.x = unit(0.3, "cm"),
    legend.text = element_text(size = 12)
  ) +
  scale_y_continuous(limits = c(0, 80), expand = c(0, 0)) +
  scale_x_continuous(limits = c(0, 44)) +
  
  # Add moon images in night areas
  annotation_custom(moon_img, xmin = 10, xmax = 15, ymin = 70, ymax = 75) +
  annotation_custom(moon_img, xmin = 34, xmax = 39, ymin = 70, ymax = 75) +
  
  # Add sun images in day areas
  annotation_custom(sun_img, xmin = 21, xmax = 26, ymin = 70, ymax = 75) 
micro2_litter_p1

# save the plot
ggsave(filename = 
       here("output","figures", "microphase2_littermoisture_by_ppt_and_depth.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

## iButton Data Plotting

```{r}
#| label: read in L1 iButton CSV

### NOTE: time in the datetime column is two hours earlier than the time column. I'm assuming for now that datetime is correct, but need to check this carefully.

Microphase2_iButtons_df <- read_csv(here("data","microphase2_iButtons_L1.csv"))

# remove duplicate rows
Microphase2_iButtons_df <- Microphase2_iButtons_df |>
  distinct()

# change to a factor and change capitalization for consistency
Microphase2_iButtons_df$Rainfall <- as.factor(Microphase2_iButtons_df$rainfall)

# add new column for DEPTH that uses the same classification as the litter data
Microphase2_iButtons_df <- Microphase2_iButtons_df |>
  mutate(DEPTH = case_when(
    depth == "D0" ~ "0",
    depth == "D1"  ~ "1",
    depth == "D3" ~ "3",
    TRUE ~ NA_character_
  ))
```

```{r}
#| label: bin iButton temperature into hourly means

Microphase2_iButtons_hourly_df <- Microphase2_iButtons_df |>
  # create a "bin" around each whole number of elapsed_time
  mutate(elapsed_bin = round(elapsed_time)) |>
  # keep only rows within +/- 0.5 of the whole number
 # filter(elapsed_time >= elapsed_bin - 0.5,
  #       elapsed_time <  elapsed_bin + 0.5) #%>%
  group_by(DEPTH, quadrat, Rainfall, elapsed_bin) |>
  summarise(
    temp_hourly_mean = mean(temperature, na.rm = TRUE),
    N = n()
  ) |>
  group_by(DEPTH, Rainfall, elapsed_bin) |>
  summarise(
    temperature = mean(temp_hourly_mean, na.rm = TRUE),
    N = n(),
    sd_temp = sd(temp_hourly_mean, na.rm = TRUE)
  )


```

```{r}
#| label: plot iButton temperature by rainfall 

### NEEDS WORK

micro2_temp_p1a <- Microphase2_iButtons_hourly_df |>
    mutate(
    Rainfall = fct_recode(Rainfall,
      "0 mm" = "0",
      "5 mm" = "5",
      "10 mm" = "10"),
    DEPTH = fct_recode(DEPTH,
      "D. Surface"      = "0",
      "E. 1 cm Depth"   = "1",
      "F. 3 cm Depth"   = "3"
    )
  ) |>
 ggplot(aes(x = elapsed_bin, y = temperature,
                               color = Rainfall,
                               shape = Rainfall,
                               linetype = Rainfall,
                               group = Rainfall)) +
  # add blue box for fog
  annotate("rect", xmin = 18, xmax = 19, 
           ymin = -Inf, ymax = Inf, alpha = 0.5, fill = "#54b8e3") +
  # Add shaded night areas
  annotate("rect", xmin = night1_start_m2, xmax = night1_end_m2, 
           ymin = -Inf, ymax = Inf, 
           alpha = 0.2, fill = "grey",
           colour = "black", linewidth = 0.3) +
  annotate("rect", xmin = night2_start_m2, xmax = night2_end_m2, 
           ymin = -Inf, ymax = Inf, 
           alpha = 0.2, fill = "grey",
           colour = "black", linewidth = 0.3) +
  # add line connecting points
  geom_line(linewidth = 0.8) +
  # add points for mean values
  geom_point(size = 3) +
  # add error bars for Â±SE
  geom_errorbar(aes(ymin = temperature - (sd_temp / sqrt(N)),
                    ymax = temperature + (sd_temp / sqrt(N))),
                width = 0.2) +
  facet_grid(. ~ DEPTH) +
  scale_color_manual(values = Rainfall_colors) +
  scale_linetype_manual(values = c("solid", "dashed", "dotted")) +
  scale_x_continuous(limits = c(0, 44)) +
  scale_y_continuous(limits = c(0, 35), expand = c(0, 0)) +
  labs(x = "Elapsed Time (hours)",
       y = "Litter Temp. (Â°C)",
       color = "",
       shape = "",
       linetype = "") +
  theme_classic(base_size = 16) +
  theme(
    panel.spacing = unit(1, "lines"),
    strip.background = element_rect(fill = "gray80", color = "black"),
    strip.text = element_text(color = "black"),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),
    legend.position = "top",
    legend.justification = c("center","top")
  )
micro2_temp_p1a

# save the plot
#ggsave(filename = 
#       here("output","figures", "microphase2_temperature_by_ppt#.jpg"),
#       device = "jpeg",
#       width = 8, height = 6, dpi = 300)
```

```{r}
#| label: plot iButton temperature by rainfall 

micro2_temp_p1 <- Microphase2_iButtons_df |>
    mutate(
    Rainfall = fct_recode(Rainfall,
      "0 mm" = "0",
      "5 mm" = "5",
      "10 mm" = "10"),
    DEPTH = fct_recode(DEPTH,
      "D. Surface"      = "0",
      "E. 1 cm Depth"   = "1",
      "F. 3 cm Depth"   = "3"
    )
  ) |>
  ggplot(aes(x = elapsed_time, y = temperature,
             color = Rainfall,
             shape = Rainfall,
             linetype = Rainfall,
             group = Rainfall)) +
 # add blue box for fog
  annotate("rect", xmin = 18, xmax = 19, 
           ymin = -Inf, ymax = Inf, alpha = 0.5, fill = "#54b8e3") +
  # Add shaded night areas
  annotate("rect", xmin = night1_start_m2, xmax = night1_end_m2, 
           ymin = -Inf, ymax = Inf, 
           alpha = 0.2, fill = "grey",
           colour = "black", linewidth = 0.3) +
  annotate("rect", xmin = night2_start_m2, xmax = night2_end_m2, 
           ymin = -Inf, ymax = Inf, 
           alpha = 0.2, fill = "grey",
           colour = "black", linewidth = 0.3) +
  geom_smooth(method = "loess", se = TRUE, span = 0.2, linewidth = 0.5) +
  facet_grid(. ~ DEPTH) +
  scale_color_manual(values = Rainfall_colors) +
#  scale_shape_manual(values = c(16, 17, 18)) +
  scale_linetype_manual(values = c("solid", "dashed", "dotted")) +
  scale_x_continuous(limits = c(0, 44)) +
  scale_y_continuous(limits = c(0, 35), expand = c(0, 0)) +
  labs(x = "Elapsed Time (hours)",
       y = "Litter Temp. (Â°C)",
       color = "",
       shape = "",
       linetype = "") +
  theme_classic(base_size = 16) +
  theme(
    panel.spacing = unit(1, "lines"),
    strip.background = element_rect(fill = "gray80", color = "black"),
    strip.text = element_text(color = "black"),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),
    legend.position = "top",
    legend.justification = c("center","top")
  )
micro2_temp_p1

# save the plot
ggsave(filename = 
       here("output","figures", "microphase2_temperature_by_ppt.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

## Combine litter moisture and temperature plots

```{r}
#| label: Combine plots (FIG 5)

# supress legends in plot 2, use plot 1 legends for combined plot
plot1_legend <- micro2_litter_p1 + theme(legend.position = "top")
plot2_no_legend <- micro2_temp_p1 + theme(legend.position = "none")

combined_plots <- plot_grid(plot1_legend, plot2_no_legend, ncol = 1, align = "v", rel_heights = c(1, 1))

final_plot <- ggdraw() +
  draw_plot(combined_plots, x = 0, y = 0, width = 1, height = 1)
final_plot

# save the plot
ggsave(filename = 
       here("output","figures", "Fig5_microphase2_litter_and_temp.jpg"),
       device = "jpeg",
       width = 8, height = 6, dpi = 300)
```

# Litter Moisture ANOVAs

```{r}
#| label: check ANOVA assumptions

# Filter and prepare data
micro2_df <- micro2_df |>
  mutate(Group = interaction(DEPTH, Rainfall))

# Step 1: Check initial normality
hist(micro2_df$LitterMoisturePct, main = "Histogram Litter Moisture", xlab = "response var")
qqnorm(micro2_df$LitterMoisturePct); qqline(micro2_df$LitterMoisturePct)

shapiro_raw <- shapiro.test(micro2_df$LitterMoisturePct)
cat("Shapiro-Wilk p-value (raw):", shapiro_raw$p.value, "\n")

# Step 2: Apply bestNormalize if needed
if (shapiro_raw$p.value < 0.05) {
  bn_obj <- bestNormalize(micro2_df$LitterMoisturePct, allow_orderNorm = FALSE)
  micro2_df <- micro2_df |>
    mutate(LitterMoisturePct_trans = predict(bn_obj, newdata = LitterMoisturePct))
  used_var <- "LitterMoisturePct_trans"
  transform_used <- class(bn_obj$chosen_transform)[1]
  
  # Check transformed normality
  hist(micro2_df$LitterMoisturePct_trans, 
       main = "Histogram of Transformed Moisture", xlab = "response var_trans")
  qqnorm(micro2_df$LitterMoisturePct_trans); qqline(micro2_df$LitterMoisturePct_trans)
  
  shapiro_trans <- shapiro.test(micro2_df$LitterMoisturePct_trans)
  cat("Shapiro-Wilk p-value (transformed):", shapiro_trans$p.value, "\n")
} else {
  used_var <- "LitterMoisturePct"
  transform_used <- "None"
}

# Step 3: Levene's Test
levene_result <- leveneTest(reformulate("Group", used_var), data = micro2_df)

# Step 4: Summary Table
summary_table <- tibble(
  variable = used_var,
  transformed = transform_used,
  shapiro_p_raw = shapiro_raw$p.value,
  shapiro_p_trans = if (exists("shapiro_trans")) shapiro_trans$p.value else NA,
  levene_p = levene_result$`Pr(>F)`[1]
)
print(summary_table)
```

```{r}
#| label: two-way ANOVAs at key time points

# uses the ANOVA function loaded in the preparations steps chunk
# Separate into dfs for the key time points (6, 18, 30, 42)
micro2_6h_df <- micro2_df |>
  filter(elapsed_time == "6")
micro2_18h_df <- micro2_df |>
  filter(elapsed_time == "18")
micro2_30h_df <- micro2_df |>
  filter(elapsed_time == "30")
micro2_42h_df <- micro2_df |>
  filter(elapsed_time == "42")

# Two-way ANOVA models 

# 6h
anova_model <- aov(reformulate(c("DEPTH", "Rainfall",
                                  "DEPTH:Rainfall"),
                                used_var),
                   data = micro2_6h_df)
anova_summary <- summary(anova_model)

# Compute emmeans and pairwise comparisons
emm_depth <- emmeans(lm_model, ~ DEPTH)
emm_rain <- emmeans(lm_model, ~ Rainfall)

# Pairwise comparisons with Tukey adjustment
pairs_depth <- pairs(emm_depth, adjust = "tukey")
pairs_rain <- pairs(emm_rain, adjust = "tukey")

# save everything as a text file
sink(here::here("output", "stats", "anova_summary_micro2_6h.txt"))

cat("=== ANOVA Summary ===\n")
print(anova_summary)

cat("\n=== Post Hoc: DEPTH ===\n")
print(emm_depth)
cat("\n--- Pairwise Comparisons (DEPTH, Tukey) ---\n")
print(pairs_depth)

cat("\n=== Post Hoc: Rainfall ===\n")
print(emm_rain)
cat("\n--- Pairwise Comparisons (Rainfall, Tukey) ---\n")
print(pairs_rain)

sink()

# 18h
anova_model <- aov(reformulate(c("DEPTH", "Rainfall",
                                  "DEPTH:Rainfall"),
                                used_var),
                   data = micro2_18h_df)
anova_summary <- summary(anova_model)

# Compute emmeans and pairwise comparisons
emm_depth <- emmeans(lm_model, ~ DEPTH)
emm_rain <- emmeans(lm_model, ~ Rainfall)

# Pairwise comparisons with Tukey adjustment
pairs_depth <- pairs(emm_depth, adjust = "tukey")
pairs_rain <- pairs(emm_rain, adjust = "tukey")

# save everything as a text file
sink(here::here("output", "stats", "anova_summary_micro2_18h.txt"))

cat("=== ANOVA Summary ===\n")
print(anova_summary)

cat("\n=== Post Hoc: DEPTH ===\n")
print(emm_depth)
cat("\n--- Pairwise Comparisons (DEPTH, Tukey) ---\n")
print(pairs_depth)

cat("\n=== Post Hoc: Rainfall ===\n")
print(emm_rain)
cat("\n--- Pairwise Comparisons (Rainfall, Tukey) ---\n")
print(pairs_rain)

sink()

#30 h
anova_model <- aov(reformulate(c("DEPTH", "Rainfall",
                                  "DEPTH:Rainfall"),
                                used_var),
                   data = micro2_30h_df)
anova_summary <- summary(anova_model)

# Compute emmeans and pairwise comparisons
emm_depth <- emmeans(lm_model, ~ DEPTH)
emm_rain <- emmeans(lm_model, ~ Rainfall)

# Pairwise comparisons with Tukey adjustment
pairs_depth <- pairs(emm_depth, adjust = "tukey")
pairs_rain <- pairs(emm_rain, adjust = "tukey")

# save everything as a text file
sink(here::here("output", "stats", "anova_summary_micro2_30h.txt"))

cat("=== ANOVA Summary ===\n")
print(anova_summary)

cat("\n=== Post Hoc: DEPTH ===\n")
print(emm_depth)
cat("\n--- Pairwise Comparisons (DEPTH, Tukey) ---\n")
print(pairs_depth)

cat("\n=== Post Hoc: Rainfall ===\n")
print(emm_rain)
cat("\n--- Pairwise Comparisons (Rainfall, Tukey) ---\n")
print(pairs_rain)

sink()

#42 h
anova_model <- aov(reformulate(c("DEPTH", "Rainfall",
                                  "DEPTH:Rainfall"),
                                used_var),
                   data = micro2_42h_df)

# Create an lm model for emmeans compatibility
lm_model <- lm(
  reformulate(c("DEPTH", "Rainfall", "DEPTH:Rainfall"), used_var),
  data = micro2_42h_df
)
anova_summary <- summary(anova_model)

# Compute emmeans and pairwise comparisons
emm_depth <- emmeans(lm_model, ~ DEPTH)
emm_rain <- emmeans(lm_model, ~ Rainfall)

# Pairwise comparisons with Tukey adjustment
pairs_depth <- pairs(emm_depth, adjust = "tukey")
pairs_rain <- pairs(emm_rain, adjust = "tukey")

# save everything as a text file
sink(here::here("output", "stats", "anova_summary_micro2_42h.txt"))

cat("=== ANOVA Summary ===\n")
print(anova_summary)

cat("\n=== Post Hoc: DEPTH ===\n")
print(emm_depth)
cat("\n--- Pairwise Comparisons (DEPTH, Tukey) ---\n")
print(pairs_depth)

cat("\n=== Post Hoc: Rainfall ===\n")
print(emm_rain)
cat("\n--- Pairwise Comparisons (Rainfall, Tukey) ---\n")
print(pairs_rain)

sink()
```
